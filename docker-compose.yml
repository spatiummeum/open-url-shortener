version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: url_shortener_db
    environment:
      POSTGRES_DB: url_shortener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - url_shortener_network

  # Redis para cach√©
  redis:
    image: redis:7-alpine
    container_name: url_shortener_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - url_shortener_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: url_shortener_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/url_shortener
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production
      FRONTEND_URL: http://localhost:3000
      BASE_URL: http://localhost:3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - url_shortener_network
    volumes:
      - ./backend/logs:/app/logs

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: url_shortener_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_BASE_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - url_shortener_network

volumes:
  postgres_data:
  redis_data:

networks:
  url_shortener_network:
    driver: bridge
