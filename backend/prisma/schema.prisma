generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  name                String?
  plan                UserPlan             @default(FREE)
  isActive            Boolean              @default(true)
  isVerified          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  lastLogin           DateTime?
  domains             Domain[]
  loginAttempts       LoginAttempt[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]
  securityEvents      SecurityEvent[]
  subscription        Subscription?
  urls                Url[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String    @unique
  stripeSubscriptionId String?   @unique
  plan                 UserPlan
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Domain {
  id        String   @id @default(cuid())
  domain    String   @unique
  userId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  urls      Url[]

  @@map("domains")
}

model Url {
  id          String      @id @default(cuid())
  originalUrl String
  shortCode   String      @unique
  title       String?
  description String?
  password    String?
  isActive    Boolean     @default(true)
  expiresAt   DateTime?
  userId      String?
  domainId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  analytics   Analytics[]
  clicks      Click[]
  domain      Domain?     @relation(fields: [domainId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@index([shortCode])
  @@index([userId])
  @@map("urls")
}

model Click {
  id        String   @id @default(cuid())
  urlId     String
  ip        String
  userAgent String?
  referer   String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  timestamp DateTime @default(now())
  url       Url      @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@index([urlId])
  @@index([timestamp])
  @@map("clicks")
}

model Analytics {
  id           String   @id @default(cuid())
  urlId        String
  date         DateTime @db.Date
  clicks       Int      @default(0)
  uniqueClicks Int      @default(0)
  topCountries Json?
  topReferrers Json?
  topDevices   Json?
  topBrowsers  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  url          Url      @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@unique([urlId, date])
  @@index([urlId])
  @@index([date])
  @@map("analytics")
}

model SecurityEvent {
  id          String            @id @default(cuid())
  userId      String?
  type        SecurityEventType
  description String
  ip          String?
  userAgent   String?
  metadata    Json?
  timestamp   DateTime          @default(now())
  user        User?             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([type])
  @@map("security_events")
}

model BlockedIp {
  id        String    @id @default(cuid())
  ip        String    @unique
  reason    String
  blockedAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([ip])
  @@map("blocked_ips")
}

model LoginAttempt {
  id          String   @id @default(cuid())
  email       String
  ip          String
  success     Boolean
  userId      String?
  userAgent   String?
  attemptedAt DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@index([email, attemptedAt])
  @@index([ip, attemptedAt])
  @@index([userId])
  @@map("login_attempts")
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SecurityEventType {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  IP_BLOCKED
}
